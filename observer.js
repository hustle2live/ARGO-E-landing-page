const animationIn="customAnimationIn",animationScale="customAnimationScale",animationSlideInLeft="slideInLeft",animationSlideInLeftRotate="slideInLeftRotate",animationSlideInRight="slideInRight",servicesContainer=document.querySelector(".services__content.container"),serviceCardsAll=document.querySelectorAll(".services__card.animated"),iconsAboutAll=document.querySelectorAll(".icon.animated"),serviceDescriptionPicture=document.querySelector(".service-description__image.animated"),serviceDescriptionText=document.querySelector(".service-description__service-types.animated"),extraServicesContainer=document.querySelector(".extra-services__content.container"),animatedCardsRightAll=document.querySelectorAll(".animated.right"),animatedCardsLeftAll=document.querySelectorAll(".animated.left"),animatedCardsCenterAll=document.querySelectorAll(".animated.center"),defaultOptions={threshold:[.5]},observer=(e,t=defaultOptions)=>new IntersectionObserver(e,t),onEntryCallback=(e,t)=>{e.forEach(e=>{e.isIntersecting&&e.target.classList.add(t)})},serviceSectionEntryCallback=e=>{e.forEach(e=>{if(e.isIntersecting)for(const e of serviceCardsAll)e.classList.add(animationIn)})},extraServiceSectionEntryCallback=e=>{e.forEach(e=>{if(e.isIntersecting){for(const e of animatedCardsRightAll)e.classList.add("slideInRight");for(const e of animatedCardsLeftAll)e.classList.add("slideInLeft");for(const e of animatedCardsCenterAll)e.classList.add(animationScale)}})};observer(serviceSectionEntryCallback,{threshold:[.25]}).observe(servicesContainer),observer(extraServiceSectionEntryCallback,{threshold:[.25]}).observe(extraServicesContainer);for(const e of iconsAboutAll)observer(e=>onEntryCallback(e,animationScale)).observe(e);observer(e=>onEntryCallback(e,"slideInLeftRotate"),{threshold:[.1]}).observe(serviceDescriptionPicture),observer(e=>onEntryCallback(e,"slideInRight"),{threshold:[0]}).observe(serviceDescriptionText);