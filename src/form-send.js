// EXAMPLE POST QUERY - from postman
// https://api.telegram.org/bot6717439509:AAHaPvuHO3WORt6_3p3CMIJgoCp5fECbX8s/sendMessage?chat_id=843486240&text=Hello Vova, this is a postman ddsaad ..

// const chat_id = `843486240`; // –í–æ–ª–æ–¥–∏–º–∏—Ä –ö—É–∑–Ω—î—Ü–æ–≤
// const chat_id = `471789797`; // –ü–∞–≤–ª–æ –¢–∏—Ç–∞—Ä–µ–Ω–∫–æ

// // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –≤ api —Ç–µ–ª–µ–≥—Ä–∞–º
// const params = {
//    chat_id: tg_user, // id –ø–æ–ª—É—á–∞—Ç–µ–ª—è
//    text: textMessage, // —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
//    parse_mode: 'HTML'
// }; // —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è HTML (–Ω–µ –≤—Å–µ HTML —Ç–µ–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç)

const feedbackWrapper = document.querySelector('.feedback-wrapper');
const feedbackForm = document.querySelector('.feedback-wrapper form');
const buttonFeedbackClose = document.querySelector('.feedback-wrapper .btn-close');
const ctaButtonsAll = document.querySelectorAll('.cta-button');
const submitButton = document.querySelector('.btn-submit');

const getCurrentTime = () => new Date().toString();

const dateTimeMessageFormatt = (date) => `${date.substring(8, 10)} ${date.substring(4, 7)} ${date.substring(11, 24)}`;

const showHideFeedbackWrapper = () => feedbackWrapper.classList.toggle('hidden');

ctaButtonsAll.forEach((btn) => btn.addEventListener('click', showHideFeedbackWrapper));

buttonFeedbackClose.addEventListener('click', showHideFeedbackWrapper);

const bot_token = `6717439509:AAHaPvuHO3WORt6_3p3CMIJgoCp5fECbX8s`; // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const chat_id = `843486240`; // id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

const textMessageFormatter = ({ name, tel, msg = '-' }) => {
   const time = dateTimeMessageFormatt(getCurrentTime());
   return `<b>üëã ‚úâÔ∏è –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –∑ —Å–∞–π—Ç—É ARGO-E.com.ua</b> - –§–û–†–ú–ê –ó–í–û–†–û–¢–ù–¨–û–ì–û –ó–í'–Ø–ó–ö–£ [CONTACT FORM]:
<b>–Ü–º'—è:</b> ${name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${tel}
<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> ${msg}
<b>–ù–∞–¥—ñ—Å–ª–∞–Ω–æ:</b> ${time}`;
};

// POST API TO TELEGRAM BOT

const postFeedback = async (TOKEN, DATA, METHOD_NAME = `sendMessage`) => {
   const response = await fetch(`https://api.telegram.org/bot${TOKEN}/${METHOD_NAME}`, {
      method: 'POST',
      body: DATA
   });
   if (!response.ok) throw new Error("User's registration Failed. Error");
   const data = await response.json();
   return data;
};

// <--/ POST API TO TELEGRAM BOT -->

const onFormSubmit = (e) => {
   e.preventDefault();
   const formData = new FormData(feedbackForm);
   const formValues = {
      name: formData.get('name'),
      tel: formData.get('phone'),
      msg: formData.get('message') || ' - '
   };
   const textMessage = textMessageFormatter(formValues);

   formData.append('chat_id', chat_id);
   formData.append('text', textMessage);
   formData.append('parse_mode', 'HTML');

   return formData;
};

const hideFormAfterFourSec = () => {
   window.setTimeout(() => {
      feedbackWrapper.classList.add('fadeout');
   }, 4000);

   window.setTimeout(() => {
      showHideFeedbackWrapper();
      feedbackWrapper.classList.remove('fadeout');
   }, 5000);
};

const onSuccess = () => {
   feedbackWrapper.lastElementChild.innerHTML = `<span class='green'>–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ.</span>`;
   feedbackForm.reset();
   submitButton.disabled = true;
   hideFormAfterFourSec();
};

const onError = () => {
   feedbackWrapper.lastElementChild.innerHTML = `<span class='red'>*–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...</span>`;
};

const hadleSubmit = (formData) => {
   return new Promise(function (resolve, reject) {
      postFeedback('bot_token', formData)
         .then((data) => {
            onSuccess();
         })
         .catch((error) => {
            onError();
            submitButton.disabled = true;
            reject(error.message);
         });
   });
};

feedbackForm.onsubmit = (e) => hadleSubmit(onFormSubmit(e));

// –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É FORM ELEMENTS –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
// –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫
// disable –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã ?? –Ω—É–∂–µ–Ω –ª–∏ - –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è —Ñ–æ—Ä–º–∞ –∏—Ç–∞–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è...

// –¥–æ–±–∞–≤–∏—Ç—å –º–∞–∫—Å –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
// –¥–æ–±–∞–≤–∏—Ç—å ReGex –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–ø—É—Ç–æ–≤

// –ø–æ–º–µ–Ω—è—Ç—å —Å–ª–∞–π–¥–µ—Ä—ã
// —É–º–µ–Ω—å—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–µ–Ω–∏—è
// –ø—Ä–æ–ø–∏—Å–∞—Ç—å ALT —Ç–µ–∫—Å—Ç
